# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
# entre 1 y el n√∫mero que indique el usuario 

def factorial(n):
    if n == 0 or n == 1:  # Caso base
        return 1
    else:
        return n * factorial(n - 1)  # Llamada recursiva

# Pedir al usuario un n√∫mero
numero = int(input("Ingrese un n√∫mero entero mayor o igual a 1: "))

# Calcular y mostrar el factorial de todos los n√∫meros desde 1 hasta el ingresado
print("\nFactoriales desde 1 hasta", numero, ":")
for i in range(1, numero + 1):
    print(f"{i}! = {factorial(i)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario 
# especifique. 

def fibonacci(n):
    if n == 0:  # Caso base 1
        return 0
    elif n == 1:  # Caso base 2
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)  # Llamada recursiva

# Pedir al usuario un n√∫mero
posicion = int(input("Ingrese una posici√≥n (entero ‚â• 0): "))

# Validar que el n√∫mero sea positivo
if posicion < 0:
    print("¬°Error! La posici√≥n debe ser ‚â• 0.")
else:
    # Mostrar la serie completa hasta la posici√≥n indicada
    print(f"\nSerie de Fibonacci hasta la posici√≥n {posicion}:")
    for i in range(posicion + 1):
        print(f"Fib({i}) = {fibonacci(i)}")

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
# exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un 
# algoritmo general. 

def potencia(base, exponente):
    if exponente == 0:  # Caso base: cualquier n√∫mero elevado a 0 es 1
        return 1
    else:
        return base * potencia(base, exponente - 1)  # Llamada recursiva

# Pedir al usuario la base y el exponente
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente (entero ‚â• 0): "))

# Validar que el exponente no sea negativo
if exponente < 0:
    print("¬°Error! El exponente debe ser ‚â• 0.")
else:
    resultado = potencia(base, exponente)
    print(f"\n{base} elevado a {exponente} es: {resultado}")

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
# decimal y devuelva su representaci√≥n en binario como una cadena de texto. 

def decimal_a_binario(n):
    if n == 0:  # Caso base 1
        return "0"
    elif n == 1:  # Caso base 2
        return "1"
    else:
        return decimal_a_binario(n // 2) + str(n % 2)  # Llamada recursiva

# Pedir al usuario un n√∫mero decimal
numero = int(input("Ingrese un n√∫mero entero positivo: "))

# Validar que el n√∫mero sea positivo
if numero < 0:
    print("¬°Error! El n√∫mero debe ser ‚â• 0.")
else:
    binario = decimal_a_binario(numero)
    print(f"\nEl n√∫mero {numero} en binario es: {binario}")